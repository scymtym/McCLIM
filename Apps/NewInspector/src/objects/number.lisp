;;;; Copyright (C) 2018, 2019 Jan Moringen
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Library General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 2 of the License, or (at your option) any later version.
;;;;
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Library General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU Library General Public
;;;; License along with this library; if not, write to the
;;;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;;;; Boston, MA  02111-1307  USA.

(cl:in-package #:new-inspector)

;;; Object inspection methods

(defmethod inspect-object-using-state ((object number)
                                       (state  inspected-object)
                                       (style  (eql :expanded-header))
                                       (stream t))
  (format stream "~A ~A" (type-of object) object)) ; TODO type inspectable?

(defmethod inspect-object-using-state ((object float)
                                       (state  inspected-object)
                                       (style  (eql :expanded-header))
                                       (stream t))
  (call-next-method)

  (let ((has-value-p t))
    #+sbcl (macrolet ((maybe-special-float (predicate label)
                        `(when (,predicate object)
                           (setf has-value-p nil)
                           (write-char #\Space stream)
                           (badge stream ,label))))
             (maybe-special-float sb-ext:float-infinity-p     "infinity")
             (maybe-special-float sb-ext:float-denormalized-p "denormalized")
             (maybe-special-float sb-ext:float-nan-p          "nan")
             (maybe-special-float sb-ext:float-trapping-nan-p "trapping-nan"))))

(defmethod inspect-object-using-state ((object integer)
                                       (state  inspected-object)
                                       (style  (eql :expanded-body))
                                       (stream t))
  (formatting-table (stream)
    (formatting-row (stream)
      (with-style (stream :slot-like)
        (formatting-cell (stream) (write-string "Value" stream))
        (formatting-cell (stream)))
      (formatting-cell (stream)
        (format stream "~:D = ~:*#x~X = ~:*#o~O = ~:*#b~B" object)))

    (formatting-row (stream)
      (formatting-place (stream object 'pseudo-place (integer-length object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Length" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream))))))

(defmethod inspect-object-using-state ((object ratio)
                                       (state  inspected-object)
                                       (style  (eql :expanded-body))
                                       (stream t))
  (formatting-table (stream)
    (formatting-row (stream)
      (formatting-place (stream object 'pseudo-place (numerator object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Numerator" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream)))

      (formatting-place (stream object 'pseudo-place (denominator object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Denominator" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream))))
    (formatting-row (stream)
      (formatting-place (stream object 'pseudo-place (float object 1.0d0) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Float" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream))))))

(defmethod inspect-object-using-state ((object float)
                                       (state  inspected-object)
                                       (style  (eql :expanded-body))
                                       (stream t))
  (let ((radix       (float-radix object))
        (has-value-p #+sbcl (not (or (sb-ext:float-infinity-p object)
                                     (sb-ext:float-denormalized-p object)
                                     (sb-ext:float-nan-p object)
                                     (sb-ext:float-trapping-nan-p object)))
                     #-sbcl t))
    (multiple-value-bind (significand exponent sign)
        (when has-value-p (decode-float object))
      (with-preserved-cursor-x (stream)
        (formatting-table (stream)
          (formatting-row (stream)
            (formatting-place (stream object 'pseudo-place radix present inspect)
              (with-style (stream :slot-like)
                (formatting-cell (stream) (write-string "Radix" stream))
                (formatting-cell (stream) (present stream)))
              (formatting-cell (stream)
                (if has-value-p
                    (with-style (stream :float-radix)
                      (inspect stream))
                    (inspect stream))))
            (formatting-place (stream object 'pseudo-place (float-precision object) present inspect)
              (with-style (stream :slot-like)
                (formatting-cell (stream) (write-string "Digits" stream))
                (formatting-cell (stream) (present stream)))
              (formatting-cell (stream) (inspect stream)))
            (formatting-place (stream object 'pseudo-place (float-digits object) present inspect)
              (with-style (stream :slot-like)
                (formatting-cell (stream) (write-string "Precision" stream))
                (formatting-cell (stream) (present stream)))
              (formatting-cell (stream) (inspect stream))))

          (when has-value-p
            (formatting-row (stream)
              (formatting-place (stream object 'pseudo-place sign present inspect)
                (with-style (stream :slot-like)
                  (formatting-cell (stream) (write-string "Sign" stream))
                  (formatting-cell (stream) (present stream)))
                (with-style (stream :float-sign)
                  (formatting-cell (stream) (inspect stream))))
              (formatting-place (stream object 'pseudo-place significand present inspect)
                (with-style (stream :slot-like)
                  (formatting-cell (stream) (write-string "Significand" stream))
                  (formatting-cell (stream) (present stream)))
                (with-style (stream :float-significand)
                  (formatting-cell (stream) (inspect stream))))
              (formatting-place (stream object 'pseudo-place exponent present inspect)
                (with-style (stream :slot-like)
                  (formatting-cell (stream) (write-string "Exponent" stream))
                  (formatting-cell (stream) (present stream)))
                (with-style (stream :float-exponent)
                  (formatting-cell (stream) (inspect stream))))))))
      ;; Value
      (when has-value-p
        (let ((exponent-offset (* 0.3 (nth-value 1 (text-size stream "0")))))
          (clim:stream-increment-cursor-position stream 0 exponent-offset)
          (format stream "~A = " object)
          (with-style (stream :float-sign)
            (format stream "~F" sign))
          (write-string " × " stream)
          (with-style (stream :float-significand)
            (format stream "~F" significand))
          (write-string " × " stream)
          (with-style (stream :float-radix)
            (format stream "~D" radix))
          (clim:stream-increment-cursor-position stream 0 (- exponent-offset))
          (with-style (stream :float-exponent)
            (format stream "~D" exponent)))))))

(defmethod inspect-object-using-state ((object complex)
                                       (state  inspected-object)
                                       (style  (eql :expanded-body))
                                       (stream t))
  (formatting-table (stream)
    (formatting-row (stream)
      (formatting-place (stream object 'pseudo-place (type-of (realpart object)) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Part type" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream))))

    (formatting-row (stream)
      (formatting-place (stream object 'pseudo-place (realpart object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Real part" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream)))

      (formatting-place (stream object 'pseudo-place (imagpart object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Imaginary part" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream))))

    (formatting-row (stream)
      (formatting-place (stream object 'pseudo-place (abs object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Magnitude" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream)))

      (formatting-place (stream object 'pseudo-place (phase object) present inspect)
        (with-style (stream :slot-like)
          (formatting-cell (stream) (write-string "Phase" stream))
          (formatting-cell (stream) (present stream)))
        (formatting-cell (stream) (inspect stream))))))
