;;; I used this function to generate the predefined colors and names - mikemac@mikemac.com

(defun generate-named-colors (&key (input-pathname "/usr/share/X11/rgb.txt")
                                   (output-pathname "data/colors.sexp"))
  (with-open-file (out output-pathname :direction :output :if-exists :supersede)
    (with-open-file (in input-pathname :direction :input)
      (format out ";;; This file is generated by ~S~%~
                   ;;; from ~S.~%~%"
              "Tools/generate-named-colors.lisp" input-pathname)
      (loop with names = nil
            for line = (read-line in nil nil)
            until (null line)
            do (if (eql (aref line 0) #\!)
                   (format out ";;;~A~%" (subseq line 1))
                   (multiple-value-bind (red index)
                       (parse-integer line :start 0 :junk-allowed t)
                     (multiple-value-bind (green index)
                         (parse-integer line :start index :junk-allowed t)
                       (multiple-value-bind (blue index)
                           (parse-integer line :start index :junk-allowed t)
                         (let* ((trimmed (string-trim '(#\Space #\Tab #\Newline) (subseq line index)))
                                (symbol-name (format nil "~@:(+~A+~)"
                                                     (substitute #\- #\Space trimmed)))
                                (name trimmed))
                           (unless (string-equal trimmed "debianred")
                             (format out "(~26S ~26S ~,4F ~,4F ~,4F)~%"
                                     symbol-name name
                                     (/ red 255.0) (/ green 255.0) (/ blue 255.0))))))))))))
