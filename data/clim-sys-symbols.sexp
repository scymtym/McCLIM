;; Name                       Binding    Specification sections and ids
(;; Standard symbols
 ("allocate-resource"         :function  (("B" "1" 1874)))
 ("clear-resource"            :function  (("B" "1" 1876)))
 ("defresource"               :macro     (("B" "1" 1872)))
 ("deallocate-resource"       :functin   (("B" "1" 1875)))
 ("map-resource"              :function  (("B" "1" 1877)))
 ("resources"                 :concept   (("B" "1" 1871)))
 ("using-resource"            :macro     (("B" "1" 1873)))

 ("*multiprocessing-p*"       :variable  (("B" "2" 1879)))
 ("all-processes"             :function  (("B" "2" 1883)))
 ("atomic-decf"               :function  (("B" "2" 1897)))
 ("atomic-incf"               :function  (("B" "2" 1896)))
 ("current-process"           :function  (("B" "2" 1882)))
 ("destroy-process"           :function  (("B" "2" 1881)))
 ("disable-process"           :function  (("B" "2" 1892)))
 ("enable-process"            :function  (("B" "2" 1893)))
 ("make-process"              :function  (("B" "2" 1880)))
 ("process-interrupt"         :functino  (("B" "2" 1891)))
 ("process-name"              :function  (("B" "2" 1885)))
 ("process-state"             :function  (("B" "2" 1886)))
 ("process-wait"              :function  (("B" "2" 1888)))
 ("process-wait-with-timeout" :function  (("B" "2" 1889)))
 ("process-whostate"          :function  (("B" "2" 1887)))
 ("process-yield"             :function  (("B" "2" 1890)))
 ("processp"                  :predicate (("B" "2" 1884)))
 ("restart-process"           :function  (("B" "2" 1894)))
 ("without-scheduling"        :macro     (("B" "2" 1895)))

 ("make-lock"                 :function  (("B" "3" 1899)))
 ("make-recursive-lock"       :function  (("B" "3" 1901)))
 ("with-lock-held"            :macro     (("B" "3" 1900)))
 ("with-recursive-lock-held"  :macro     (("B" "3" 1902)))

 ("defgeneric*"               :macro     (("B" "4" 1904)))
 ("defmethod*"                :macro     (("B" "4" 1905)))
 ;; Non-standard symbols
 ("make-condition-variable"   :function  ())
 ("condition-wait"            :function  ())
 ("condition-notify"          :function  ()))
